defmodule DayOne do

def input() do
"data"
end

  def loop() do

    inputs = 
      input()
      |> String.split("\n", trim: true)
      |> Enum.map(fn input -> String.split(input, "", trim: true) end)

    crasher(inputs)
    |> Enum.map(&Enum.reject(&1, fn item -> item == :char end))
    |> Enum.map(&(build_numbers(&1)))
    |> Enum.sum()

  end

  def crasher(input) do
    Enum.map(input, fn sublist -> 
      for item <- sublist do
        try do
          String.to_integer(item)
        rescue
          ArgumentError -> :char
        end
      end

    end)
  end

  defp build_numbers(num_list) do
    case length(num_list) do
      1 -> 
        String.to_integer("#{Enum.at(num_list, 0)}#{Enum.at(num_list, 0)}")
      _ ->
        String.to_integer("#{List.first(num_list)}#{List.last(num_list)}")
    end
  end
end
